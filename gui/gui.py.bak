import clutter
import time
import os
import glib
import canparse
import bar
xsize = 500
ysize = 500
next_button_tex = clutter.cogl.texture_new_from_file('/home/eric/uwaft-hmi/gui/img/next-button.svg', clutter.cogl.TEXTURE_NO_SLICING, clutter.cogl.PIXEL_FORMAT_ANY)

batt_temp_tex = clutter.cogl.texture_new_from_file('/home/eric/uwaft-hmi/gui/img/batt-temp.svg', clutter.cogl.TEXTURE_NO_SLICING, clutter.cogl.PIXEL_FORMAT_ANY)
class gui:
	# handle data from the canbus
	def update(self, source, cond):
		# get new data from canbus
		# and remove the newline
		data = source.readline()
		data = data.strip()
		print data
		# get the message id so we can determine
		# what should be updated
		canid = -1
		try:
			canid = int(data.split('-')[0])
		except ValueError:
			pass
		try:
			# HMI_Tx1 Message
			if canid == 160:
				# display key data
				msg = canparse.get_key(data)		
				if msg != None: 
					self.keypos_label.set_text(msg)
				# display SOC data
				soc = canparse.get_soc(data)
				self.soc_label.set_text("SOC: " + str(soc) + "%")
				
				# display HVIL on/off
				hvil = canparse.get_hvil(data)
				self.hvil_label.set_text("HVIL: " + str(hvil))

				# display H2 Alarm
				h2_alarm = canparse.get_h2_alarm(data)
				if h2_alarm:
					self.h2_alarm_label.set_text("H2!")
					self.stage.set_color(clutter.Color(255,0,0))
				else:
					self.h2_alarm_label.set_text("")
					self.stage.set_color(clutter.Color(0,0,0))

				# display temp
				temp = canparse.get_temp(data)
				self.temp_label.set_text("Temp: " + str(temp) + u"\u00B0" + "C")
		except (IndexError):
			pass
		# return true to keep handling
		# input from the canbus pipe
		return True
	def close(self):
		canbus.close()
		clutter.main_quit()
	def __init__(self, canbusfile):
		# Holds the elements of each page
		self.pages = [[],[]]
		
		# The current page number (-1 for none)
		self.curpage = -1

		# Open the can bus pipe
		self.canbus = open(canbusfile, "r+")
		
		# initialize the stage
		self.stage = clutter.Stage()
		self.stage.set_size(xsize,ysize)
		self.stage.set_color(clutter.Color(0,0,0))
	    
		# Next page button
		self.next_button = clutter.Texture()
		self.next_button.set_size(75, 45)
		self.next_button.set_position(xsize-75,0)
		self.next_button.set_cogl_texture(next_button_tex)
		self.next_button.set_reactive(True)
		self.next_button.connect("button-press-event", self.next_button_clicked)
		self.stage.add(self.next_button)

		# Key Position (Page 0) 
		self.keypos_label = clutter.Text()
		self.keypos_label.set_text("Off")
		self.keypos_label.set_size(25,100)
		self.keypos_label.set_font_name("Helvetica 25")
		self.keypos_label.set_color(clutter.Color(255,255,255))
		self.keypos_label.set_position(40, 95)
		self.pages[0].append(self.keypos_label)
		
		# SOC Display (Page 0)
		self.soc_label = clutter.Text()
		self.soc_label.set_text("SOC:")
		self.soc_label.set_size(100,25)
		self.soc_label.set_font_name("Helvetica 25")
		self.soc_label.set_color(clutter.Color(255,255,255))
		self.soc_label.set_position(40, 5)
		#self.soc_bar = bar.bar(self.stage, 40, 40)
		self.pages[0].append(self.soc_label)
		
		# HVIL Enabled Display (Page 0)
		self.hvil_label = clutter.Text()
		self.hvil_label.set_text("HVIL: ")
		self.hvil_label.set_size(100,25)
		self.hvil_label.set_font_name("Helvetica 25")
		self.hvil_label.set_color(clutter.Color(255,255,255))
		self.hvil_label.set_position(40, 50)
		self.pages[0].append(self.hvil_label)
		
		# Temp Display (Page 0)
		self.temp_label = clutter.Text()
		self.temp_label.set_text("Temp: ")
		self.temp_label.set_size(100,25)
		self.temp_label.set_font_name("Helvetica 25")
		self.temp_label.set_color(clutter.Color(255,255,255))
		self.temp_label.set_position(40, 140)
		self.pages[0].append(self.temp_label)
		
		self.temp_ico = clutter.Texture()
		self.temp_ico.set_size(70, 60)
		self.temp_ico.set_position(100,200)
		self.temp_ico.set_cogl_texture(batt_temp_tex)
		self.pages[0].append(self.temp_ico)

		# H2 Alarm Display (Page 0,1)
		self.h2_alarm_label = clutter.Text()
		self.h2_alarm_label.set_text("")
		self.h2_alarm_label.set_size(100,25)
		self.h2_alarm_label.set_font_name("Helvetica Bold 75")
		self.h2_alarm_label.set_color(clutter.Color(0,0,0))
		self.h2_alarm_label.set_position(xsize/2-75, ysize-100)
		self.pages[0].append(self.h2_alarm_label)
		self.pages[1].append(self.h2_alarm_label)
		# Start with page 0
		self.set_page(0)
		# allow quit
		self.stage.connect("destroy", clutter.main_quit)
		# set up to watch the canbus with handler
		# function self.update
		glib.io_add_watch(self.canbus, glib.IO_IN, self.update)

	def set_page(self, n):
		# remove elements on current page
		# do not remove if this is the first page set
		if self.curpage != -1:
			for el in self.pages[self.curpage]:
				el.hide()
				self.stage.remove(el)
		for el in self.pages[n]:
			self.stage.add(el)
			el.show()
		self.curpage = n
	def next_button_clicked(self, source, cond):
		self.set_page((self.curpage + 1) % 2)
	def start(self):
		self.stage.show_all()
		clutter.main()

if __name__ == "__main__":
	g = gui()
	try:
		g.start()
	except (KeyboardInterrupt):
		pass
